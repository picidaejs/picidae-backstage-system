/**
 * @file   Root
 * @author yucong02
 */

import {
  action,
  toJS
} from 'mobx'
import cloneDeep from 'clone-deep'

export default class Root {
  toJSON() {
    return toJS(this)
  }

  @action
  setValue(key, value) {
    let ref = this
    if (Array.isArray(key)) {
      ref = key
        .slice(0, key.length - 1)
        .reduce((model, k) => {
          return model[k]
        }, this)
      key = key[key.length - 1]
    }
    ref[key] = value
  }

  constructor(init = {}) {
    this.assignShallow(init)
  }

  @action assignShallow(init) {
    init = toJS(init)
    for (let key in init) {
      if (init.hasOwnProperty(key)) {
        this[key] = typeof init[key] === 'undefined' ? this[key] : init[key]
      }
    }
  }

  @action assign(init) {
    init = cloneDeep(toJS(init))

    this.assignShallow(init)
  }

  // 使用该方法时候，必须在 `render` 中显示引用 `this[keyName]`
  @action controlledFieldProps(keyName, keyObj = {}) {
    const {
      changeEventName = 'onChange',
      valueName = 'value',
      keyPath
    } = keyObj

    return {
      [changeEventName]: evtOrVal => {
        if (Array.isArray(keyPath)) {
          this[keyName] = keyPath.reduce((obj, keyName) => {
            obj = obj[keyName]
            return obj
          }, evtOrVal)
        } else if (evtOrVal && evtOrVal.target && evtOrVal.target.value) {
          this[keyName] = evtOrVal.target.value
        } else {
          console.log(this[keyName])
          this[keyName] = evtOrVal
        }
      },
      [valueName]: this[keyName]
    }
  }
}
