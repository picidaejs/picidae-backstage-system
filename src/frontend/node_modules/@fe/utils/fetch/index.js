/**
 * @file: fetch
 * @author: Cuttle Cong
 * @date: 2017/12/11
 * @description:
 */

import { format, parse } from 'url'
const fetch = require('isomorphic-fetch')
const progress = require('./progress')

function appendDataFromUrl(url = '', extra = {}) {
  const res = parse(url, true)
  const { protocol, query = {} } = res
  if (protocol) {
    return url
  }

  res.query = { ...extra, ...query }
  res.search = null
  return format(res)
}

module.exports = async (url, options = {}, type = 'json') => {
  if (typeof options === 'string') {
    type = options
    options = {}
  }
  const { toastError = true, ...restOptions } = options
  restOptions.method = restOptions.method || 'get'
  restOptions.method = restOptions.method.toLowerCase()

  if (type === 'json') {
    restOptions.credentials = restOptions.credentials || 'include'
    restOptions.headers = new Headers({
      'Cache-Control': 'no-cache,no-store,must-revalidate,max-age=-1',
      ...restOptions.headers,
      'Content-Type': 'application/json;charset=UTF-8'
    })
    // data, body
    if (restOptions.method === 'post') {
      restOptions.body = { ...restOptions.body, ...restOptions.data }
      if (restOptions.body instanceof Object) {
        restOptions.body = JSON.stringify(restOptions.body)
      }
    }
    else {
      const data = { ...restOptions.body, ...restOptions.data }
      delete restOptions.body
      delete restOptions.data
      url = appendDataFromUrl(url, data)
    }

  }

  try {
    let res = await fetch(url, restOptions)
    await progress(res.clone(), [url, restOptions])
    return res[type]()
  } catch (err) {
    if (toastError) {
      // TODO toast-style
      alert('Error ' + err.message)
    }
    throw err
  }
}
