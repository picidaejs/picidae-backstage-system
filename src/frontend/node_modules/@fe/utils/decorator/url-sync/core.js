/* eslint-disable */
/**
 * @file: index
 * @author: Cuttle Cong
 * @date: 2017/11/6
 * @description:
 */

import {
  observable,
  extendObservable,
  action,
  computed,
  reaction,
  autorun,
  isObservable
} from 'mobx'

import urlUtils from '../utils/url-utils'

// let globalSyncTimer = void 0
export default (urlKey, options = {}, target, property, description) => {
  options = options || {}
  const { initKey = 'init', loose = false, exitKey = 'exit', updateKey = 'update' } = options
  console.log(options)
  if (typeof target[property] === 'function') {
    throw new Error('`urlsync` 不能使用在成员方法中')
  }
  else {
    let dispose
    let syncUrlTimer
    let syncUrlFn

    function release() {
      dispose && dispose()
      dispose = null
      if (syncUrlTimer) {
        clearTimeout(syncUrlTimer)
        syncUrlFn && syncUrlFn()
        syncUrlTimer = void 0
        syncUrlFn = void 0
      }
    }

    let originExit = target[exitKey]
    target[exitKey] = function (...args) {
      console.log('dispose urlsync `' + property + '`')
      release()
      return originExit && originExit.call(this, ...args)
    }
    // Object.defineProperty(target, exitKey, {
    //     value: function (...args) {
    //         console.log('dispose urlsync `' + property + '`')
    //         release();
    //         return origin && origin.call(this, ...args)
    //     }
    // })

    let origin = target[initKey]
    target[initKey] = update(origin)
    // Object.defineProperty(target, initKey, {
    //     @action
    //     value: update(origin)
    // });

    origin = target[updateKey]
    if (loose || origin) {
      target[updateKey] = update(origin)
      // Object.defineProperty(target, updateKey, {
      //     @action
      //     value: update(origin),
      //     writable: true
      // });
    }


    function update(origin) {
      return function (...args) {
        // if (syncUrlTimer) {
        //     return;
        // }

        console.log('load urlsync `' + property + '`')
        release()

        if (!isObservable(this, property)) {
          console.warn('`' + property + '` is not observable, `urlsync` setting it to be observable')
          extendObservable(this, {
            [property]: this[property]
          })
        }

        let urlObj = urlUtils.parse(true)
        let urlValue = urlObj.query[urlKey]

        if (urlValue !== undefined) {
          console.log('before load url: `' + property + '`:', this[property])

          if (urlValue == null) {
            this[property] = urlValue
          }
          else if (typeof this[property] === 'object') {
            if (typeof urlValue === 'object') {
              if (this[property] instanceof Array) {
                this[property] = urlValue
              }
              else {
                let Class = this[property].constructor
                this[property] = new Class(urlValue)
              }
            }
            else {
              // this[property] = this[property];
            }
          }
          else if (typeof this[property] === 'number') {
            this[property] = parseFloat(urlValue)
          }
          else if (typeof this[property] === 'boolean') {
            this[property] = urlValue === 'true'
          }
          else {
            this[property] = urlValue
          }

          console.log('after loaded url: `' + property + '`:', this[property])
        } else {
          // this[property] = this[property];
        }

        let isFirst = true
        let toggleUrl = url => {
          // location.replace(url)
          location.href = url
          syncUrlTimer = void 0
          syncUrlFn = void 0
        }

        dispose = autorun(
          () => {
            if (syncUrlTimer) {
              clearTimeout(syncUrlTimer)
              syncUrlTimer = void 0
              syncUrlFn = void 0
            }
            // invoke the `getter` of this[property]
            let obj = { [urlKey]: this[property] }
            syncUrlFn = () => {
              urlObj = urlUtils.parse(true)
              let param = { ...urlObj.query, ...obj }
              let url = urlUtils.link(urlObj.path, param, urlObj.module)
              toggleUrl(url)
            }

            if (isFirst) {
              if (options.initialWrite) {
                syncUrlFn()
              }
              isFirst = false
              return
            }

            syncUrlTimer = setTimeout(syncUrlFn, 250)
          }
        )

        return origin && origin.call(this, ...args)
      }
    }
  }

  return description && { ...description, configurable: true }
}
