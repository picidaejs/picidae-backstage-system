/**
 * @file: LocalStorage
 * @author: Cuttle Cong
 * @date: 2017/12/12
 * @description:
 */
const storage = global.localStorage

class BrowserLocalStorage {
  constructor(identifier = '', opt = {}) {
    const { stringify = JSON.stringify, parse = JSON.parse } = opt
    this.identifier = identifier
    this.stringify = stringify
    this.parse = parse
  }

  clear() {
    this.keys().forEach(key =>
      this.removeItem(key)
    )
  }

  keys() {
    let keys = []
    let flag = this.identifier + '-'
    for (let i = 0; i < storage.length; i++) {
      let name = storage.key(i)
      if (name.startsWith(flag)) {
        keys.push(name.slice(flag.length))
      }
    }
    return keys
  }

  _key(name) {
    return [this.identifier, name].join('-')
  }

  getItem(key) {
    let old = storage.getItem(this._key(key))
    if (typeof old !== 'undefined') {
      return this.parse(old)
    }
  }

  setItem(key, value) {
    return storage.setItem(this._key(key), this.stringify(value))
  }

  removeItem(key) {
    return storage.removeItem(this._key(key))
  }
}

function UnKnow(identifer, opt) {
  let ref = null
  if (!(this instanceof UnKnow)) {
    ref = new UnKnow(identifer, opt)
  } else {
    ref = this
  }
  BrowserLocalStorage.apply(ref, arguments)
  return new Proxy(ref, {
    get(ref, name) {
      if (typeof ref[name] !== 'undefined') {
        return ref[name]
      }
      return ref.getItem(name)
    },
    set(ref, name, value) {
      if (typeof ref[name] !== 'undefined') {
        ref[name] = value
        return true
      }
      ref.setItem(name, value)
      return true
    }
  })
}
// UnKnow.prototype = Object.create(BrowserLocalStorage.prototype)
UnKnow.prototype = Object.create(BrowserLocalStorage.prototype)
module.exports = UnKnow