/**
 * @file: index
 * @author: Cuttle Cong
 * @date: 2017/12/10
 * @description:
 */
import React from 'react'
import Tree from './lib'
import PropTypes from 'prop-types'
import Node from './Node'

import uncontrolled from '@fe/utils/hoc/uncontrolled'
import { walk } from '@common/tree-helper'

import './style.less'


@uncontrolled('activeNode', 'tree')
export default class FileTree extends React.PureComponent {

  static propTypes = {
    ...Tree.propTypes,
    renderNode: PropTypes.func,
    onChangeActiveNode: PropTypes.func,
    activeNode: PropTypes.object
  }
  static defaultProps = {
    isNodeCollapsed: false,
    paddingLeft: 15,
    tree: {},
    renderNode: null
  }
  state = {
    activeNode: null,
    tree: this.props.tree
  }

  get activeNode() {
    return this.state.activeNode
  }

  onClickNode = (node, evt) => {
    evt.preventDefault()
    evt.stopPropagation()

    const prevActive = this.activeNode
    if (prevActive === node) {
      return
    }
    if (prevActive) {
      delete prevActive.active
    }

    node.active = true
    this.setState({
      activeNode: node
    }, this.onChange)

    if (this.props.onChangeActiveNode) {
      this.props.onChangeActiveNode(node, prevActive)
    }
  }

  renderNode = node => {
    return (
      <Node
        key={node.identifier}
        active={node.identifier === (
          this.activeNode && this.activeNode.identifier
        )}
        onClick={this.onClickNode.bind(this, node)}
        node={node}
      />
    )
  }
  onChange = (tree) => {
    if (!tree) {
      tree = this.state.tree
    }
    if (this.props.onChange) {
      this.props.onChange(tree)
    }
  }

  render() {
    const { children: treeChildren } = this.state.tree
    if (treeChildren) {
      walk(treeChildren, (node) => {
        if (!node.hasOwnProperty('collapsed')) {
          node.collapsed = true
        }
      })
    }

    return (
      <div className="tree">
        <Tree
          ref={r => this.tree = r}
          // 强制 rerender
          key={Date.now()}
          {...this.props}
          onChange={this.onChange}
          tree={this.state.tree}
          renderNode={this.renderNode}
        />
      </div>
    )
  }
}