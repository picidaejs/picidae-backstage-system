/**
 * @file: index
 * @author: Cuttle Cong
 * @date: 2017/12/12
 * @description: $END$
 */

import React from 'react'
import c from 'classnames'
import isElementOfType from '@fe/utils/isElementOfType'
import './style.less'

export default class ContextMenu extends React.Component {
  state = {
    visible: false
  }

  componentDidMount() {
    this.host.addEventListener('contextmenu', this._handleContextMenu, false)
    document.addEventListener('contextmenu', this._hideContextMenu, false)
    document.addEventListener('click', this._handleClick)
    document.addEventListener('scroll', this._handleScroll)
  }

  componentWillUnmount() {
    this.host.removeEventListener('contextmenu', this._handleContextMenu, false)
    document.removeEventListener('contextmenu', this._hideContextMenu, false)
    document.removeEventListener('click', this._handleClick)
    document.removeEventListener('scroll', this._handleScroll)
  }

  _hideContextMenu = () => {
    if (!this._matched) {
      this.setState({ visible: false })
    }
    this._matched = false
  }

  _handleContextMenu = (event) => {
    this._matched = true
    event.preventDefault()

    this.setState({ visible: true })
    const clickX = event.clientX
    const clickY = event.clientY
    const screenW = window.innerWidth
    const screenH = window.innerHeight
    const rootW = this.root.offsetWidth
    const rootH = this.root.offsetHeight

    const right = screenW - clickX > rootW
    const left = !right
    const top = screenH - clickY > rootH
    const bottom = !top

    if (right) {
      this.root.style.left = `${clickX + 5}px`
    }

    if (left) {
      this.root.style.left = `${clickX - rootW - 5}px`
    }

    if (top) {
      this.root.style.top = `${clickY + 5}px`
    }

    if (bottom) {
      this.root.style.top = `${clickY - rootH - 5}px`
    }
  }

  _handleClick = (event) => {
    const { visible } = this.state
    const wasOutside = !(
      event.target.contains === this.root
    )
    if (wasOutside && visible) this.setState({ visible: false })
  }

  _handleScroll = () => {
    const { visible } = this.state
    if (visible) this.setState({ visible: false })
  }

  get splittedChildren() {
    let container = []
    let contextMenu = []
    React
      .Children
      .forEach(this.props.children, child => {
        // https://github.com/gaearon/react-hot-loader/issues/304
        // eslint-disable-next-line no-use-before-define
        const isElementOfContainerType = isElementOfType(Container)
        if (isElementOfContainerType(child)) {
          container.push(child)
        } else {
          contextMenu.push(child)
        }
      })
    return {
      contextMenu,
      container
    }
  }

  get contextMenu() {
    const { visible } = this.state

    return (
      visible &&
      <div ref={ref => this.root = ref} className="contextMenu">
        {this.splittedChildren.contextMenu}
      </div>
    )
  }

  render() {
    return (
      <div className="contextMenu-host" ref={ref => this.host = ref}>
        {this.splittedChildren.container}
        {this.contextMenu}
      </div>
    )
  }
}

export const Container = ({ children }) => children

// eslint-disable-next-line react/prop-types
export const Option = ({ children, disabled, className, ...rest }) => (
  <div
    className={c(className, 'contextMenu--option', { 'contextMenu--option__disabled': disabled })}
    {...rest}
  >
    {children}
  </div>
)

// eslint-disable-next-line react/prop-types
export const Separator = () => (
  <div className="contextMenu--separator"/>
)

ContextMenu.Container = Container
ContextMenu.Option = Option
ContextMenu.Separator = Separator