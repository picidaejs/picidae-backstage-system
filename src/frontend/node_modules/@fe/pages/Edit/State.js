/**
 * @file: State
 * @author: Cuttle Cong
 * @date: 2017/12/11
 * @description: $END$
 */

import { action, observable, autorun } from '@fe/utils/decorator'
import fileReadAsync from '@fe/utils/fileReadAsync'
import Root from '@fe/utils/models/Root'
import { getActiveNode } from '@common/tree-helper'

export default class State extends Root {
  @observable tree = {}
  @observable fileContent = ''
  @observable fileType = 'text'
  @observable identifier = ''

  // @observable active

  @autorun
  async fetchView() {
    if (!this.identifier) {
      return
    }
    const blob = await fetch(`/api/fileView/exact/${encodeURIComponent(this.identifier)}`, 'blob')

    if (blob.type.startsWith('image')) {
      this.assignShallow({ fileType: 'image', fileContent: URL.createObjectURL(blob) })
    } else {
      const fr = await fileReadAsync(blob)
      if (fr) {
        this.assignShallow({ fileType: 'text', fileContent: fr.result })
      }
    }
  }

  @action
  async fetchTree() {
    const { data, code } = await fetch('/api/fileView/get')
    if (code === 200) {
      const newData = { tree: data }
      const active = getActiveNode(data)
      newData.identifier = active && active.identifier

      this.assignShallow(newData)
    }
  }

  @action init(/*props*/) {
    this.fetchTree()
  }

  @action update(/*props*/) {
  }

  @action exit() {
  }
}