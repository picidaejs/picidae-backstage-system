/**
 * @file: Root
 * @author: Cuttle Cong
 * @date: 2017/12/4
 * @description:
 */
import React from 'react'
import { observer } from 'mobx-react'
import { toJS, computed } from 'mobx'
import FileTree from '@fe/comps/FileTree'
import sio from '@fe/utils/hoc/state-in-out'
import AceEditor, { ace, getModeFromExtName } from '@fe/comps/AceEditor'

import 'brace/ext/searchbox'
import 'brace/ext/spellcheck'
import 'brace/ext/settings_menu'
import 'brace/ext/statusbar'

import { debounce } from 'lodash'
import { getActiveNode, treeEmbedIdentifier } from '@common/tree-helper'
import { setProxy, initialFromStorage } from './logic/store-settingmenu-change'

import State from './State'
import Node from './FileNode'
import './style.less'

ace.config.set('basePath', '/acejs')

@sio(State, 'local')
@observer
export default class Home extends React.Component {
  constructor(props) {
    super(props)
    this.saveTree = debounce(this.saveTree, 2000, { trailing: true })
  }

  @computed get tree() {
    return toJS(this.local.tree)
  }

  async saveTree(body) {
    // TODO
    // diff(body)
    body = treeEmbedIdentifier(body)
    const { code } = await fetch('/api/fileView/set', {
      method: 'post', body
    })
    if (code === 200) {
      this.local.assignShallow({ tree: body })
    }
  }

  onClickNode = async node => {
    if (!node.leaf) return
    this.local.assignShallow({ identifier: node.identifier })
  }

  @computed get activeNode() {
    return getActiveNode(this.tree)
  }

  @computed get Preview() {
    const { fileContent, fileType } = this.local

    if ('text' === fileType) {
      return (
        <AceEditor
          onLoad={editor => {
            initialFromStorage(editor)
            const StatusBar = ace.acequire('ace/ext/statusbar').StatusBar
            new StatusBar(editor, document.querySelector('#status-bar'))
            ace.acequire('ace/ext/settings_menu').init(editor)
            global.editor = editor
          }}
          mode={getModeFromExtName(this.activeNode && this.activeNode.identifier)}
          value={fileContent}
          commands={[
            {
              name: 'myCommand',
              bindKey: { win: 'Ctrl-,', mac: 'Command-,' },
              exec(editor) {
                editor.showSettingsMenu()
                setProxy(document.querySelector('#ace_settingsmenu'), editor)
              },
              readOnly: true // false if this command should not apply in readOnly mode
            }
          ]}
        />
      )
    } else if ('image' === fileType) {
      return (
        <img src={fileContent}/>
      )
    }
    return null
  }

  render() {
    const tree = this.tree
    return (
      <div className="page-edit">
        <div className="flex-container">
          <div className="file-tree">
            <FileTree
              activeNode={this.activeNode}
              onChangeActiveNode={this.onClickNode}
              renderNode={node => (
                <Node {...node} />
              )}
              tree={tree}
              onChange={data => this.saveTree(data)}
            />
          </div>
          <div className="preview-container">
            {this.Preview}
          </div>
        </div>
        <div className="status-menu" id="status-bar" ref={ref => this.statusBar = ref}>
          status-menu
        </div>
      </div>
    )
  }
}
