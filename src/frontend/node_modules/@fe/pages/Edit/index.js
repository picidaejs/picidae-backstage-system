/**
 * @file: Root
 * @author: Cuttle Cong
 * @date: 2017/12/4
 * @description:
 */
import React from 'react'
import { observer } from 'mobx-react'
import { action, toJS, computed } from 'mobx'
import FileTree from '@fe/comps/FileTree'
import sio from '@fe/utils/hoc/state-in-out'
import AceEditor, { ace, getModeFromExtName } from '@fe/comps/AceEditor'

import 'brace/ext/searchbox'
import 'brace/ext/spellcheck'
import 'brace/ext/settings_menu'
import 'brace/ext/statusbar'

import { debounce } from 'lodash'
import { getActiveNode, treeEmbedIdentifier } from '@common/tree-helper'
import { setProxy, initialFromStorage } from './logic/store-settingmenu-change'

import State from './State'
import './style.less'

ace.config.set('basePath', '/acejs')

@sio(State, 'local')
@observer
export default class Home extends React.Component {
  constructor(props) {
    super(props)
    this.saveTree = debounce(this.saveTree, 2000, { trailing: true })
  }

  @computed get tree() {
    return toJS(this.local.tree)
  }

  @action
  async saveTree(body) {
    // TODO
    // diff(body)
    body = treeEmbedIdentifier(body)
    const { code } = await fetch('/api/fileView/set', {
      method: 'post', body
    })
    if (code === 200) {
      this.local.assignShallow({ tree: body })
    }
  }

  @action
  onClickNode = async node => {
    if (!node.leaf) return
    const { code, data } = await fetch('/api/fileView/spec', {
      data: { identifier: node.identifier }
    })
    if (code === 200) {
      this.local.assignShallow({ fileContent: data })
    }
  }

  render() {
    const tree = this.tree
    const activeNode = getActiveNode(tree)
    return (
      <div className="page-edit">
        <div className="flex-container">
          <div className="file-tree">
            <FileTree
              activeNode={activeNode}
              onChangeActiveNode={this.onClickNode}
              tree={tree}
              onChange={data => this.saveTree(data)}
            />
          </div>
          <div className="ace-editor-container">
            <AceEditor
              onLoad={editor => {
                initialFromStorage(editor)
                const StatusBar = ace.acequire('ace/ext/statusbar').StatusBar
                new StatusBar(editor, document.querySelector('#status-bar'))
                ace.acequire('ace/ext/settings_menu').init(editor)
                global.editor = editor
              }}
              mode={getModeFromExtName(activeNode && activeNode.identifier)}
              value={this.local.fileContent}
              commands={[
                {
                  name: 'myCommand',
                  bindKey: { win: 'Ctrl-,', mac: 'Command-,' },
                  exec(editor) {
                    editor.showSettingsMenu()
                    setProxy(document.querySelector('#ace_settingsmenu'), editor)
                  },
                  readOnly: true // false if this command should not apply in readOnly mode
                }
              ]}
            />
          </div>
        </div>
        <div className="status-menu" id="status-bar" ref={ref => this.statusBar = ref}>
          status-menu
        </div>
      </div>
    )
  }
}
