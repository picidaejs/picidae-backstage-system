/**
 * @file: tree-helper
 * @author: Cuttle Cong
 * @date: 2017/12/12
 * @description:
 */

export function treeEmbedIdentifier(tree, name = 'identifier', prefixList = []) {
  if (Array.isArray(tree)) {
    return tree.map(node => treeEmbedIdentifier(node, name, prefixList))
  }

  const { children, ...rest } = tree
  return {
    ...rest,
    children: children && children.map(node =>
      treeEmbedIdentifier(node, name, prefixList.concat(tree.module))
    ),
    [name]: prefixList.concat(tree.module).join('/')
  }
}

export function walk(tree, func = () => {
}) {
  if (!tree) {
    return false
  }

  if (!Array.isArray(tree)) {
    tree = [tree]
  }

  function someFunc(node, i) {
    if (func(node, i, tree) === false) {
      return true
    }
    return walk(node.children, func)
  }

  return tree.some(someFunc)
}

/**
 * calculate the diff between tree A & B by identifier.
 */
export function diff(tree) {
  tree = treeEmbedIdentifier(tree, 'newIdentifier')
  walk(tree, function (node) {
    if (node.newIdentifier !== node.identifier) {
      console.log(node.identifier, '->', node.newIdentifier)
    }
  })
}

export function getActiveNode(tree) {
  let activeNode = null
  walk(tree, function (node/*, index, parent*/) {
    if (node.active) {
      activeNode = node
      return false
    }
  })
  return activeNode
}